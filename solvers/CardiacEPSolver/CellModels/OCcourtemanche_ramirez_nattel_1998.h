//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: courtemanche_1998
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: 25950, pycml: 25949, optimize: 25790)
//! on Sat Jun 11 20:27:32 2016
//! 
//! <autogenerated>

#ifndef NEKTAR_SOLVERS_ADRSOLVER_EQUATIONSYSTEMS_COURTEMANCHE_1998_HPP_
#define NEKTAR_SOLVERS_ADRSOLVER_EQUATIONSYSTEMS_COURTEMANCHE_1998_HPP_

#include <CardiacEPSolver/CellModels/CellModel.h>
namespace Nektar

{
    class courtemanche_1998 : public CellModel
    {

    public:
        /// Creates an instance of this class
        static CellModelSharedPtr create(
                const LibUtilities::SessionReaderSharedPtr& pSession,
                const MultiRegions::ExpListSharedPtr& pField)
        {
            return MemoryManager<courtemanche_1998>::AllocateSharedPtr(pSession, pField);
        }
        
        /// Name of class
        static std::string className;

        /// Constructor
        courtemanche_1998(const LibUtilities::SessionReaderSharedPtr& pSession,
                          const MultiRegions::ExpListSharedPtr& pField);

        /// Destructor
        virtual ~courtemanche_1998() {}

    protected:
        /// Computes the reaction terms $f(u,v)$ and $g(u,v)$.
        virtual void v_Update(
                const Array<OneD, const  Array<OneD, NekDouble> >&inarray,
                      Array<OneD,        Array<OneD, NekDouble> >&outarray,
                const NekDouble var_chaste_interface__environment__time);

        /// Prints a summary of the model parameters.
        virtual void v_GenerateSummary(SummaryList& s);

        /// Set initial conditions for the cell model
        virtual void v_SetInitialConditions();
    };
}

#endif

